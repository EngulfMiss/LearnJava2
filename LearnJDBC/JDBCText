#JDBC
    概念：Java DataBase Connectivity    Java数据库连接，Java语言操作数据库

    * JDBC 本质：官方(SUN公司)定义的一套操作所有关系数据库的规则(即接口)。各个数据库厂商去实现这套接口
    提供数据库驱动jar包，我们可以使用这套接口的(JDBC)编程，真正执行的代码是驱动jar包中的实现类


    * 快速入门：
        1.步骤：
            1.导入驱动jar包
                1.复制jar包到项目中
                2.右键选择Add as Library

            2.注册驱动
            3.获取数据库的连接对象Connection
            4.定义sql
            5.获取执行sql语句的对象 Statement
            6.执行sql，接收返回结果
            7.处理结果
            8.释放资源


        代码实现
        //1.导入驱动jar包
                //2.注册驱动
                Class.forName("com.mysql.jdbc.Driver");
                //3.获取数据库的连接对象
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/test","root","52snowgnar");
                //4.定义sql语句
                String sql = "update stu set score = 95 where name = 'Gnar'";
                //5.获取执行sql的对象 Statement
                Statement stmt = conn.createStatement();
                //6.执行sql
                int count = stmt.executeUpdate(sql);
                //7.处理结果
                System.out.println(count);
                //8.释放资源
                stmt.close();
                conn.close();




        对象详解：
            1.DriverManager：驱动管理
                * 功能：
                    1.注册驱动：告诉程序该使用哪一个数据库驱动jar包
                        static void registerDrivaer(Driver driver)
                        注册与给定的驱动程序 DriverManager
                        在com.mysql.jdbc.Driver类中存在静态代码块

                    2.获取数据库连接
                        - 方法： static Connection getConnection(String url,String user,String password)
                                        - 参数：
                                            * url : 指定连接的路径
                                                * 语法 : "jdbc:mysql://ip地址(域名):端口号/数据库名称"
                                                例子："jdbc:mysql://localhost:3306/test"

                                            * user : 用户名
                                            * password : 密码


            2.Connection：数据库连接对象
                1.功能：
                    1.获取执行sql的对象
                        * Statement createStatement();
                        * preparedStatement prepareStatement(String sql);


                    2.管理事务:
                        * 开启事务：void setAutoCommit(boolean autoCommit) : 调用该方法设置参数为false，即开启事务
                        * 提交事务：void Commit()
                        * 回滚事务: void rollback()


            3.Statement：执行sql的对象
                1.执行sql
                    - boolean execute(String sql);
                    - int executeUpdate(String sql) : 执行DML(insert,update,delete) 语句 , DDL(create,alter,drop) 语句
                        返回值： 影响的行数，可以通过这个判断sql是否执行成功
                    - ResultSet executeQuery(String sql) : 执行DQL(select)语句


            4.ResultSet：结果集对象，封装查询结果
                * next() : 游标向下移动一行，一次只能获得一个数据
                    * getXxx(参数)
                        - Xxx:数据类型
                        - 参数：
                            int : 代表列的编号，从1开始
                            String : 列的名称

                        - 注意：
                            * 使用步骤：
                                1.游标向下移动一行
                                2.判断是否有数据
                                3.获取数据





            5.PreparedStatement：执行sql的对象
                1.SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接，会造成安全性问题
                    1.输入的用户名随便，输入密码： a' or 'a' = 'a
                    2.sql:select * from user where username = 'asdadaf' and password = 'a' or 'a' = 'a'


                2.解决sql注入问题：使用PrepareStatement对象解决
                3.预编译的SQL：参数使用？作为占位符
                4.步骤：
                    1.导入驱动jar包
                        1.复制jar包到项目中
                        2.右键选择Add as Library

                    2.注册驱动
                    3.获取数据库的连接对象Connection
                    4.定义sql
                        * 注意：sql的参数使用?作为占位符  如：select * from user where username = ? and password = ?

                    5.获取执行sql语句的对象 PreparedStatement   Connection.prepareStatement(String sql)
                    6.给?赋值：
                        * 方法：setXxx(参数1,参数2)
                            * 参数1 ： ?的位置编号 从1开始
                            * 参数2 ： ?的值


                    7.执行sql，接收返回结果，不需要传递sql语句了
                    8.处理结果
                    9.释放资源





##抽取JDBC工具类：简便操作
    目的：简化书写
    分析：
        1.抽取注册驱动
        2.抽取一个方法获取连接对象
            * 需求：不想传递参数，还想保证工具类的通用性
            * 解决：使用配置文件
                例如：jdbc.properties
                url =
                user =
                password =


        3.抽取一个方法来释放资源





## JDBC控制事务
    1.事务：一个包含多个步骤的业务操作，如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么
    同时失败
    2.操作：
        1.开启事务
        2.提交事务
        3.回滚事务

    3.使用Connection对象管理事务
        * 开启事务：setAutoCommit(boolean autoCommit) : 调用该方法设置参数为false,即开启事务
        * 提交事务：commit()
        * 回滚事务：rollback()