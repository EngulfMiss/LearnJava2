MyQSL数据库

-----------------------------------------------------------------------------------
DDL：操作数据库，表
操作数据库：
1.C(Create) 创建：
    - create database 数据库名称;

    - create database if not exists 数据库名称


2.R(Retrieve) 查询：
    - 查询所有数据库名称：
        - show databases;

    - 查询某个数据库的字符集,查询某个数据库的创建语言
        - show create database 数据库名称;


3.U(Update) 修改：
    - 修改数据库的字符集
        - alter database 数据库名称 character set 字符集名称;

4.D(Delect) 删除：
    - 删除数据库
        - drop database 数据库名称;

        - drop database if exists 数据库名称

5.使用数据库
    - 查询当前正在使用的数据库名称
        - select database();

    - 使用数据库
        - use 数据库名称;



操作表：
1.C(Create) 创建：
    创建表：
     create table 表名(
        列名1 数据类型1,
        列名2 数据类型2,
        列名3 数据类型3,
        ...
        列名n 数据类型n);

    复制表：
        create table 表名 like 被复制的表名;

2.R(Retrieve) 查询：
    - 查询某个数据库中所有的表名称
        - show tables;

    - 查询表结构
        - desc 表名;


3.U(Update) 修改：
    - 修改表名
    - alter table 表名 rename to 新表名;

    - 修改表的字符集
    - alter table 表名 character set 字符集名称;

    - 添加一列
    - alter table 表名 add 列名 数据类型;

    - 修改列名称 类型
    - alter table 表名 change 列名 新列名 新数据类型;
    只修改列的数据类型
    - alter table 表名 modify 列名 新数据类型;



4.D(Delect) 删除：
    - drop table 表名;
    - drop table if exists 表名;



-----------------------------------------------------------------------------------
DML ： 增删改表中的数据
    1.添加数据：
        - 语法：
            - insert into 表名(列名1,列名2,...列名n) values(值1值2...值n);

        - 注意：
            1.列名和值要一一对应
            2.如果表名后，不定义列名，默认给所有列添加值


    2.删除数据：
        - 语法：
            - delete from 表名 [where条件];

        - 注意：
            1.如果不加条件，则删除表中所有记录
            2.如果要删除所有记录
                - delete from 表明;  -- 不推荐使用.有多少条记录就会执行多少次删除操作
                - TRUNCATE TABLE 表名; -- 推荐使用，先删除表,然后再创建一张一样的表


    3.修改数据：
        - 语法：
            - update 表名 set 列名1 = 值1,列名2 = 值2,...列名n = 值n [where条件]
            不加where条件，默认所有列



-----------------------------------------------------------------------------------
DQL：查询表中记录
    * select * from 表名;

    - 语法：
        - select
            字段列表
          from
            表名列表
          where
            条件列表
          group by
            分组字段
          having
            分组之后的条件限定
          order dy
            排序
          limit
            分页限定



    - 基础查询
        1.多个字段的查询
            select 字段名1,字段名2,...from 表名;
            - 注意：
                * 查询所有字段

        2.去除重复
            - distinct

        3.计算列
            - 一般可以使用四则运算计算一些列的值
            - ifnull(表达式1,表达式2)
                - 表达式1 ： 那个字段需要判断为null
                - 表达式2 ： 如果表达式1为null用什么来替换

        4.起别名
            - as


    - 条件查询
        1.where子句后跟条件
        2.运算符
            1.   > , < , <= , >= , =
            2.   BETWEEN...AND  在什么之间
            3.   IN(集合)
            4.   LIKE
                * 占位符
                    *   _ ：单个任意字符
                    *   % ：多个占位字符

            5.   IS NULL    NULL不能用=判断
            6.   and 或 &&    与
            7.   or  或 ||    或
            8.   not 或  !    非



-----------------------------------------------------------------------------------

其他一些：
    #1.DQL查询语句
        1.排序查询
            * 语法 ： order by 子句
                - order by 排序字段1,排序字段2,...
                当字段1相同就会用第二字段排序

            * 排序方式：
                - ASC ： 升序，默认的
                - DESC : 降序
             注意：当字段1相同就会用第二字段排序



        2.聚合函数：将一列数据作为一个整体，进行纵向的计算
            1.count ： 计算个数         SELECT COUNT(name) FROM student
            2.max ：计算最大值
            3.min ： 计算最小值
            4.avg ： 计算平均值
            5.sum ： 计算和

        注意： 集合函数计算排除null值的
            解决方案：
                1.我们选择不包含null的列来计算
                2.IFNULL函数



        3.分组查询
            1.语法：group by 分组字段
            2.注意：
                1.分组之后查询的字段：分组字段，聚合函数(不能写其他字段)
                2.where 和 having 的区别?
                区别1：
                    - where 在分组之前进行限定，不满足条件，不参与分组
                    - having 在分组之后进行限定，如果不满足，则不会配查询出来

                区别2：
                    - where 后不可以跟聚合函数
                    - having 可以进行聚合函数的判断


        4.分页查询
            1.语法：limit 开始的索引，每页查询的条数;
            开始索引的公式：开始的索引 = (当前的页码 - 1) * 每页显示的条数




    #2.约束
        * 概念 ： 对表中的数据进行限定，保证数据的正确性，有效性和完整性
        - 分类 ：
            1.主键约束：primary key
            2.非空约束：not null
            3.唯一约束：unique
            4.外键约束：foreign key


        ##非空约束：not null
            1.创建表时添加约束
            CREATE TABLE stu{
                id INT,
                NAME VARCHAR(20) NOT NULL
            };

            2.创建表后，添加约束
            ALTER TABLE stu MODIFY name VARCHAR(20) NOT NULL;

            3.创建表后，删除非空约束
            ALTER TABLE stu MODIFY name VARCHAR(20);




        ##唯一约束：unique
            CREATE TABLE stu{
                id INT,
                phone VARCHAR(20) UNIQUE
            };

        注意：
            mysql中，唯一约束的列的值可以有多个null

        删除唯一约束：
            ALTER TABLE stu DROP INDEX phone;

        创建表后，添加约束:
            ALTER TABLE stu MODIFY phone VARCHAR(20);




        ##主键约束：
            1.注意：
                1.含义：非空且唯一
                2.一张表只能有一个字段为主键
                3.主键就是表中记录的唯一标识


            2.在创建表时，添加主键约束
                CREATE TABLE stu {
                    id INT primary key,  -- 给id添加主键约束
                    name VARCHAR(20)
                };

            3.删除主键：
                ALTER TABLE stu DROP PRIMARY KEY;

            4.创建表以后，添加主键
                ALTER TABLE stu MODIFY id INT PRIMARY KEY;

            5.自动增长
                * 概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值的自动增长

                - 在创建表时，添加主键约束，并且完成主键的自动增长
                 CREATE TABLE stu {
                        d INT primary key auto_increment,  -- 给id添加主键约束
                        name VARCHAR(20)
                 };

              删除自动增长：
                  ALTER TABLE stu MODIFY id INT;

              添加自动增长：
                  ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;


        ## 外键约束 ： foreign key
            1.在创建表时，可以添加外键
                * 语法：
                    create table 表名{
                        ...,
                        外键列
                        constraint 外键名称 foreign key (外键列名称) reference 主表的名称(主表列名称)
                    };


            2.删除外键：
                ALTER TABLE 外键所在表表名 DROP FOREIGN KEY 外键名称

            3.在创建表后，添加外键：
                ALTER TABLE 想要添加外键约束的表表名 ADD constraint 外键名称 foreign key (外键列名称) reference 主表的名称(主表列名称)
                                                                                                                (关联的是谁)
            例如：ALTER TABLE 想要添加外键约束的表表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键列名称) REFERANCE department(id) /*ON UPDATE CASCADE*/(级联操作);

            注意：外键值可以为NULL，但不可以为约束表中没有的数据


            4.级联操作：
            添加级联：
            ALTER TABLE 想要添加外键约束的表表名 ADD CONSTRAINT 外键名称
            FOREIGN KEY (外键列名称) REFERANCE department(id)
            ON UPDATE CASCADE /*(级联操作)*/;

            级联更新：
            ON UPDATE CASCADE
            级联删除：
            ON DELETE CASCADE



    #3.关系
        1.多表之间的关系：
            - 一对一：
                如：人和身份证

            - 一对多(多对一):
                如：部门和员工

            - 多对多：
                如：学生和课程


        2.关系实现：
            1.一对多(多对一)：
                如：部门和员工
                实现方式：在多的一方建立外键，指向一的一方的主键

            2.多对多：
                如：学生和选课
                实现方式：多对多关系实现需要借助第三张中间表
                中间表至少包含两个字段，这两个字段为第三张表的外键，分别指向两张表的主键

            3.一对一：
                如：人和身份证
                实现方式：一对一的关系，可以在任意一方添加 唯一 外键指向另一方的主键。

        数据库设计的范式：
            概念：设计数据库时，需要遵循的一些规范

            分类：
                - 第一范式(1NF)：每一列都是不可分割的原子数据项
                存在的问题：
                    1.存在严重的数据冗余
                    2.数据添加存在问题
                    3.数据删除存在问题


                - 第二范式(2NF)：在1NF的基础上，非码属性必须完全依赖于候选码(在INF基础上消除非主属性对主码的部分函数依赖)
                * 几个概念：
                    1.函数依赖：A->B,如果通过A的属性(属性组)值,可以确定唯一B属性的值,则称B依赖于A
                    例如：学号-->姓名   (学号,课程名称)-->分数

                    2.完全函数依赖：A-->B , 如果A是一个属性组,则B属性值的确定需要依赖于A属性组中所有的属性值

                    3.部分函数依赖：A-->B , 如果A是一个属性组，则B属性值的确定只需要依赖于A属性组中的某一些值即可

                    4.传递函数依赖：A-->B,B-->C ,如果通过A属性(属性组)的值，可以确定唯一B属性的值,再通过B属性(属性组)
                    的值可以确定唯一C

                    5.码：如果再一张表中一个属性或属性组，被其他所有属性完全依赖，则称这个属性(属性组)为该表的码
                        * 主属性：码属性组中的所有属性
                        * 非主属性：除码属性组的属性



                - 第三范式(3NF)：在2NF基础上，任何非主属性不依赖于其他非主属性(在2NF基础上消除传递依赖)




    #5.数据库的备份和还原
        1.命令行
            * 语法：
                * 备份： mysqldump -u用户名 -p密码 要备份的数据库的名称 > 保存的路径
                * 还原：
                    1.登录数据库
                    2.创建数据库
                    3.使用数据库
                    4.执行文件 source 文件路径

        2.图形用户工具


-------------------------------------------------------------------------------------------------

#1.多表查询
    - 多表查询分类：
        1.内连接查询
            * 隐式内连接 ： 使用where条件消除无用的数据
            * 显式内连接 ：
                语法： select 字段列表 from 表名1 inner join 表名2 on 条件
                SELECT * FROM emp INNER JOIN dept ON emp.dept_id = dept.id;




        2.外连接查询
            1.左外连接
                语法：
                    select 字段列表 from 表1 left [outer] join 表2 on 条件
                查询的是左表的所有数据以及其交集部分


            2.右外连接
                语法：
                    select 字段列表 from 表1 right [outer] join 表2 on 条件
                查询的是右表的所有数据以及其交集部分


        3.子查询
            * 概念：查询中嵌套查询，称嵌套查询为子查询

            * 子查询的不同情况
                1.子查询的结果是单行单列的
                    * 子查询作为条件，使用运算符去判断  运算符 : > >= < <= =

                2.子查询的结果是多行单列的
                    * 子查询作为条件，使用IN去判断

                3.子查询的结果是多行多列的
                    * 子查询可以作为一张虚拟表


#2.事务
    1.事务的基本介绍
         - 概念：
            如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么全部成功要么全部失败

         - 操作：
            1.开启事务 ： start transaction
            2.回滚 : rollback
            3.提交 : commit

            Mysql数据库中事务默认自动提交
                * 一条DML(增删改)语句会自动提交一次事务
                * 事务提交的两种方式：
                    * 自动提交
                        DML会自动提交
                    * 手动提交
                        * 需要先开启事务，再提交

                * 修改事务的默认提交方式：
                    * 查看事务的默认提交方式 ： SELECT @@autocommit;  -- 1 代表自动提交 0 代表手动提交
                    * 修改默认提交方式 ： set @@autocommit = 0;

    2.事务的四大特征
        1.原子性：是不可分隔的最小操作单位，要么全部成功，要么全部失败
        2.持久性：当事务提交或回滚后，数据库会持久化的保存数据
        3.隔离性：多个事务之间相互独立
        4.一致性：事务操作前后，数据总量不变


    3.事务的隔离级别(了解)
        * 概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，
        设置不同的隔离级别可以解决这些问题

        * 存在问题：
            1.脏读：一个事务，读取到另一个事务中没有提交的数据
            2.不可重复读(虚读)：在同一个事务中，两次读取到的数据不一样
            3.幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到
            自己的修改

        * 隔离级别：
            1.read uncommitted : 读未提交
                * 产生的问题：脏读，不可重复读，幻读

            2.read committed : 读已提交 (Oracle默认)
                * 产生的问题：不可重复读，幻读

            3.repeatable read : 可重复读 (Mysql默认)
                * 产生的问题 ：幻读

            4.serializable ：串行化
                解决所有问题

            * 注意：隔离级别从小到大，安全性越来越高，但效率越来越低
            * 数据库查询隔离级别：
                select @@tx_isolation;
            * 数据库设置隔离级别：
                set global transaction isolation level 级别字符串;






       SQL分类回顾：
        1.DDL(数据定义语言)：操作数据库和表
        2.DML(数据操作语言)：增删改表中数据
        3.DQL(数据查询语言)：查询表中数据
        4.DCL(数据控制语言)：管理用户，授权



#3.DCL
    * DBA:数据库管理员

    * DCL：管理用户，授权
        1.管理用户
            1.添加用户
                CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';


            2.删除用户
                DROP USER '用户名'@'主机名';



            3.修改用户
                - 修改密码
                    UPDATE USER PASSWORD = PASSWORD('新密码') WHERE USER = '用户名';（高版本好像改了）
                    SET PASSWORD FOR '用户名'@'主机名' = PASSWORD('新密码');

                - mysql忘记root的密码怎么办
                    1.  cmd --> net stop mysql;
                    2.  使用无验证方式启动mysql服务
                        mysqld --skip-grant-tables
                    3.打开新的cmd窗口，直接输入mysql登录
                    4.use mysql
                    5.UPDATE USER PASSWORD = PASSWORD('新密码') WHERE USER = '用户名'
                    6.关闭两个窗口
                    7.打开任务管理器，手动结束mysqld.exe 的进程
                    8.启动mysql服务
                    9.使用新密码登录




                 - 权限管理
                    1.查询权限：
                        SHOW GRANTS FOR '用户名'@'主机名';


                    2.授予权限：
                        GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名';
                        GRANT ALL ON *.* TO '用户名'@'主机名';

                    3.撤销权限：
                        REVOKE 权限列表 ON 数据库名.表名 FROM '用户名'@'主机名';





            4.查询用户
                -- 1. 切换到mysql数据库
                USE mysql;
                -- 2. 查询user表
                SELECT * FROM USER;

                * 通配符： % 可以在任意主机使用用户登录


        2.授权